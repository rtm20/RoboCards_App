{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchchange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onsearchchange","event","setState","target","value","state","fetch","then","response","json","users","this","filterRobots","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yOAoBeA,EAhBF,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,MAAMC,EAAO,EAAPA,GAIzB,OACC,yBAAKC,UAAU,4FACd,yBAAKC,IAAI,SAAUC,IAAG,+BAA0BH,EAA1B,cACtB,6BACC,4BAAKA,GACL,4BAAKF,GACL,2BAAIC,MCcOK,EAzBE,SAAC,GAAgB,IAAfC,EAAc,EAAdA,OAAOL,EAAO,EAAPA,GAEzB,OAEE,6BAECK,EAAOC,KAAI,SAACC,EAAKC,GAChB,OACC,kBAAC,EAAD,CAEEC,IAAKT,EACLA,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCKTW,EAnBG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAElC,OACE,yBAAKX,UAAU,OACd,2BAEAA,UAAU,mCAETY,KAAK,SAELC,YAAY,gBAEZC,SAAUH,MCFCI,G,MATD,SAACC,GAEf,OACE,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAO,kBAAmBC,OAAO,UACjEJ,EAAMK,YC+CKC,E,YA3Cf,aAAc,IAAD,8BACZ,+CAiBDC,eAAe,SAACC,GAEf,EAAKC,SAAS,CAACf,YAAac,EAAME,OAAOC,SAlBzC,EAAKC,MAAM,CACVxB,OAAO,GACPM,YAAY,IAJD,E,iFASO,IAAD,OAEnBmB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAG,EAAKR,SAAS,CAACrB,OAAO6B,S,+BAS3B,IAAD,EACoBC,KAAKN,MAAzBxB,EADA,EACAA,OAAOM,EADP,EACOA,YACPyB,EAAa/B,EAAOgC,QAAO,SAAAC,GAEjC,OAAOA,EAAMxC,KAAKyC,cAAcC,SAAS7B,EAAY4B,kBAErD,OAAQlC,EAAOoC,OAIX,yBAAKxC,UAAU,0BACd,6CACA,kBAAC,EAAD,CAAWW,aAAcuB,KAAKX,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUnB,OAAQ+B,MAPxB,2C,GAjCgBM,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAAOC,SAASC,eAAe,SD0HzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,iB","file":"static/js/main.9c692a9d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n//all using Tachyons classes  for css inside div\r\n\r\nconst Card = ({name,email,id}) =>{\r\n\t// DESTRUCTURED ABOVE PROPS INSTEAD OF THIS LINE_______ const {name,email,id}= props;\r\n\r\n\t// Template strings are used for randomizing the url everytime...\r\n\treturn(\r\n\t\t<div className='bg-washed-red b--dark-purple b--solid tc calisto dib br3  pa3 ma2 grow dim bw2 shadow-5 '> \r\n\t\t\t<img alt='robots'  src={`https://robohash.org/${id}?100x100`}/> \r\n\t\t\t<div>\r\n\t\t\t\t<h2>{id}</h2>\t\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\t\r\n\t);\r\n}\r\n \r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots,id}) =>{\r\n\t// using map for looping around the Card details  \r\n\treturn(\r\n\r\n\t\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map((user,i)=>{\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card \r\n\r\n\t\t\t \t\t\t\tkey={id} \r\n\t\t\t \t\t\t\tid={robots[i].id}\r\n\t\t\t \t\t\t\tname={robots[i].name} \r\n\t\t\t \t\t\t\temail={robots[i].email} \r\n\t\t\t \t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\t</div>\t\t\r\n\t\t\t\t   \r\n\r\n\t\t);\r\n\r\n}\r\n\t\t\r\nexport default CardList;"," import React from 'react';\r\n\r\n const SearchBox = ({searchfield, searchchange }) =>{\r\n\r\nreturn(\r\n\t\t<div className='pa2'>\r\n\t\t\t<input\r\n\r\n\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\r\n\t\t\t type='search'\r\n\r\n\t\t\t placeholder='search robots'\r\n\r\n\t\t\t onChange={searchchange}\r\n\t\t\t />\r\n\r\n\r\n\t\t</div>\t \r\n\t);\r\n} \r\n export default SearchBox;\r\n","import React from 'react';\r\n// Making a scrollable component for our Cardlist so that our search box should alwasy remains at the top...\r\n\r\nconst Scroll =(props)=>{\r\n\r\nreturn(\r\n\t\t<div style={{overflowY: 'scroll', border:'3px solid black', height:'800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\t\r\n\t);\r\n};\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\nimport CardList from '../Components/CardList';\r\n//import {robots} from './robots'\r\nimport SearchBox from '../Components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../Components/Scroll';\r\n\r\nclass App extends Component{\t\r\n\r\n// below is the smart component because it has the state in it the above syntax is of smart component\r\n\r\nconstructor(){\r\n\tsuper()\r\n\tthis.state={\r\n\t\trobots:[],\r\n\t\tsearchfield:''\r\n\r\n\t}\r\n\r\n}\r\ncomponentDidMount(){\r\n\r\nfetch('https://jsonplaceholder.typicode.com/users')\r\n.then(response=> response.json())\r\n.then(users=> this.setState({robots:users}));\r\n\r\n}\r\n\r\n\r\nonsearchchange=(event)=>{\r\n\r\n\tthis.setState({searchfield: event.target.value})\r\n}\r\nrender(){\r\n\t\tconst{robots,searchfield}=this.state;\r\n\t\tconst filterRobots=robots.filter(robot =>{\r\n\r\n\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t})\r\n\t\treturn !robots.length?\r\n\t\t<h1>Loading</h1> :\r\n\t\t(\r\n\r\n\t\t\t\t\t\t<div className='tc athelas b underline'>\r\n\t\t\t\t\t\t\t<h1>Robo-Friends </h1>\r\n\t\t\t\t\t\t\t<SearchBox searchchange={this.onsearchchange}/>\r\n\t\t\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t\t\t<CardList robots={filterRobots}/>\r\n\t\t\t\t\t\t\t</Scroll>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t);\r\n\t\t    }\r\n  \r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"," import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport App from './Containers/App';\n// (( ./ syntax means the file css is in the same folder))\n//import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}